name: Validation Pipeline
on:
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:
permissions:
  contents: write
  pull-requests: read
  security-events: write
jobs:
  validation:
    name: Fix and Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔍 Determine branch name
        id: get-branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi
      
      - name: 🏗️ Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: 🛠️ Install golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: v2.1.5
          install-mode: goinstall
          
      # FIX PHASE
      - name: ✨ Apply Go Formatting
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          gofmt -w .
          goimports -local github.com/pjscruggs/slogcp -w .
      
      - name: 📅🕰️ Get current year in US Central Time
        id: year
        run: |
          YEAR=$(TZ='America/Chicago' date +%Y)
          echo "YEAR=$YEAR" >> $GITHUB_OUTPUT
      
      - name: 📄⚙️📅 Update license year in config
        run: |
          if [ "${{ steps.year.outputs.YEAR }}" -gt "2025" ]; then
            sed -i 's/copyright-year: .*/copyright-year: "2025-${{ steps.year.outputs.YEAR }}"/g' .licenserc.yaml
            echo "📅⬆️ Updated year to 2025-${{ steps.year.outputs.YEAR }}"
          else
            echo "📅✅ Keeping year as 2025"
          fi
      
      - name: 📄🩹 Fix License Headers
        id: fix-license
        uses: apache/skywalking-eyes/header@5c5b974209f0de5d905f37deb69369068ebfc15c # v0.7.0
        with:
          mode: fix
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🧐 Apply Lint Fixes
        run: golangci-lint run --fix ./...
        continue-on-error: true
      
      - name: 💾 Commit All Fixes
        run: |
          git config user.name "Code Maintenance Bot"
          git config user.email "code-bot@users.noreply.github.com"
          git diff --quiet || {
            git add .
            git commit -m "chore: apply code maintenance (formatting, linting, license headers)"
            git push origin ${{ steps.get-branch.outputs.BRANCH_NAME }}
          }
          
      # Re-checkout if any changes were pushed
      - name: 🔄 Re-checkout after fixes if needed
        run: |
          if git diff --quiet origin/${{ steps.get-branch.outputs.BRANCH_NAME }} HEAD; then
            echo "No changes were committed, skipping re-checkout"
          else
            echo "Changes were committed, re-checking out latest code"
            git fetch
            git checkout origin/${{ steps.get-branch.outputs.BRANCH_NAME }}
          fi
      
      # VALIDATION PHASE
      - name: 🧐 Verify Linting
        run: golangci-lint run ./...
      
      - name: 📄✅ Verify License Headers
        uses: apache/skywalking-eyes/header@5c5b974209f0de5d905f37deb69369068ebfc15c # v0.7.0
        with:
          mode: check
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 💨 Run Local Smoke Tests (Tier 1)
        id: go-smoke-tests
        run: |
          go test -v -race -tags=smoke -coverprofile=coverage-smoke.out ./...

      - name: 📄 Print Coverage Report
        if: always()
        run: |
          echo "--- Test Coverage ---"
          if [ -f coverage-smoke.out ]; then
            cat coverage-smoke.out
          else
            echo "Coverage file (coverage-smoke.out) not found."
          fi
          echo "---------------------"
      
      - name: 🛡️🔍 Run Vulnerability Check
        run: |
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "Running vulnerability check..."
          govulncheck ./...