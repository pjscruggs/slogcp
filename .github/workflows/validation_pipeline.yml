name: Validation Pipeline
on:
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:
permissions:
  contents: write
  pull-requests: read
  security-events: write
  checks: write
jobs:
  validation:
    name: Fix and Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: üõí Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üîç Determine branch name
        id: get-branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi
      
      - name: üèóÔ∏è Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: üõ†Ô∏è Install golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.5
          install-mode: goinstall
          
      # FIX PHASE
      - name: ‚ú® Apply Go Formatting
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          gofmt -w .
          goimports -local github.com/pjscruggs/slogcp -w .
      
      - name: üìÖüï∞Ô∏è Get current year in US Central Time
        id: year
        run: |
          YEAR=$(TZ='America/Chicago' date +%Y)
          echo "YEAR=$YEAR" >> $GITHUB_OUTPUT
      
      - name: üìÑ‚öôÔ∏èüìÖ Update license year in config
        run: |
          if [ "${{ steps.year.outputs.YEAR }}" -gt "2025" ]; then
            sed -i 's/copyright-year: .*/copyright-year: "2025-${{ steps.year.outputs.YEAR }}"/g' .licenserc.yaml
            echo "üìÖ‚¨ÜÔ∏è Updated year to 2025-${{ steps.year.outputs.YEAR }}"
          else
            echo "üìÖ‚úÖ Keeping year as 2025"
          fi
      
      - name: üìÑü©π Fix License Headers
        id: fix-license
        uses: apache/skywalking-eyes/header@v0.7.0
        with:
          mode: fix
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üßê Apply Lint Fixes
        run: golangci-lint run --fix ./...
        continue-on-error: true
      
      - name: üíæ Commit All Fixes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git diff --quiet || {
            git add .
            git commit -m "chore: apply code maintenance (formatting, linting, license headers)"
            git push origin ${{ steps.get-branch.outputs.BRANCH_NAME }}
          }
          
      # Re-checkout if any changes were pushed
      - name: üîÑ Re-checkout after fixes if needed
        run: |
          if git diff --quiet origin/${{ steps.get-branch.outputs.BRANCH_NAME }} HEAD; then
            echo "No changes were committed, skipping re-checkout"
          else
            echo "Changes were committed, re-checking out latest code"
            git fetch
            git checkout origin/${{ steps.get-branch.outputs.BRANCH_NAME }}
          fi
      
      # VALIDATION PHASE
      - name: üßê Verify Linting
        run: golangci-lint run ./...
      
      - name: üìÑ‚úÖ Verify License Headers
        uses: apache/skywalking-eyes/header@v0.7.0
        with:
          mode: check
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üí® Run Local Smoke Tests (Tier 1)
        id: go-smoke-tests
        run: |
          go test -v -race -tags=smoke -coverprofile=coverage-smoke.out ./...

      - name: üß™ Run Unit Tests (Tier 2)
        if: success()
        id: go-unit-tests
        run: |
          go test -v -race -tags=unit -coverprofile=coverage-unit.out ./...

      - name: üìÑ Print Coverage Report
        if: always()
        run: |
          echo "--- Test Coverage ---"
          if [ -f coverage-smoke.out ]; then
            cat coverage-smoke.out
          else
            echo "Coverage file (coverage-smoke.out) not found."
          fi
          if [ -f coverage-unit.out ]; then
            echo "--- Unit Test Coverage ---"
            cat coverage-unit.out
          fi
          echo "---------------------"
      
      - name: üõ°Ô∏èüîç Run Vulnerability Check
        run: |
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "Running vulnerability check..."
          govulncheck ./...

  e2e_gatekeeper:
    name: E2E Test Gatekeeper
    needs: validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      checks: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Create/Update E2E Check Run
        id: create_check
        uses: actions/github-script@v7
        with:
          script: |
            const checkName = 'E2E Tests (GCP)';
            const prNumber = context.payload.pull_request.number;
            const sha = context.payload.pull_request.head.sha;
            
            // Create initial check run
            const { data: checkRun } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: sha,
              status: 'queued',
              output: {
                title: checkName,
                summary: 'E2E tests are queued...'
              }
            });
            
            core.setOutput('check_run_id', checkRun.id);
            return checkRun.id;
      
      - name: Determine E2E Trigger Type
        id: trigger_type
        run: |
          if [[ "${{ github.actor }}" == "renovate[bot]" ]]; then
            echo "should_auto_trigger=true" >> $GITHUB_OUTPUT
            echo "üì¶ Renovate PR detected - will auto-trigger E2E tests"
          else
            echo "should_auto_trigger=false" >> $GITHUB_OUTPUT
            echo "üë§ Human PR detected - E2E tests require manual trigger"
          fi
      
      - name: Update Check for Manual Trigger Required
        if: steps.trigger_type.outputs.should_auto_trigger == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create_check.outputs.check_run_id }},
              status: 'completed',
              conclusion: 'action_required',
              completed_at: new Date().toISOString(),
              output: {
                title: 'E2E Tests (GCP) - Manual Trigger Required',
                summary: `‚ö†Ô∏è E2E tests require manual trigger by a maintainer after code review.
                
                A repository maintainer can trigger E2E tests by:
                1. Going to Actions ‚Üí "Manual E2E Test Trigger" workflow
                2. Click "Run workflow" and enter PR number: ${{ github.event.pull_request.number }}
                
                This check must pass before the PR can be merged.`
              }
            });
      
      - name: Generate App Token for E2E Dispatch
        if: steps.trigger_type.outputs.should_auto_trigger == 'true'
        id: app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID_DISPATCH }}
          private-key: ${{ secrets.PRIVATE_KEY_DISPATCH }}
          owner: pjscruggs
          repositories: slogcp-test
      
      - name: Dispatch E2E Tests
        if: steps.trigger_type.outputs.should_auto_trigger == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.app_token.outputs.token }}
          repository: pjscruggs/slogcp-test
          event-type: e2e-test
          client-payload: |
            {
              "lib_repo_full_name": "${{ github.repository }}",
              "pr_sha": "${{ github.event.pull_request.head.sha }}",
              "pr_number": "${{ github.event.pull_request.number }}",
              "lib_run_id": "${{ github.run_id }}",
              "check_run_id": "${{ steps.create_check.outputs.check_run_id }}"
            }