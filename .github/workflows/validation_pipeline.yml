name: Validation Pipeline
on:
  pull_request:
    branches: [ main ]
  pull_request_target:
    branches: [ main ]
    types: [opened, reopened, synchronize]
  merge_group:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write
  pull-requests: read
  security-events: write
  checks: write

jobs:
  # -----------------------------
  # VALIDATION (runs actual code)
  # -----------------------------
  validation:
    # Only run this job on events where it's safe to execute PR code.
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'merge_group' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call'
    name: Fix and Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout Code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔍 Determine branch name
        id: get-branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi
      
      - name: 🏗️ Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: 🛠️ Install golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: v2.1.5
          install-mode: goinstall
          
      # FIX PHASE
      - name: ✨ Apply Go Formatting
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          gofmt -w .
          goimports -local github.com/pjscruggs/slogcp -w .
      
      - name: 📅🕰️ Get current year in US Central Time
        id: year
        run: |
          YEAR=$(TZ='America/Chicago' date +%Y)
          echo "YEAR=$YEAR" >> $GITHUB_OUTPUT
      
      - name: 📄⚙️📅 Update license year in config
        run: |
          if [ "${{ steps.year.outputs.YEAR }}" -gt "2025" ]; then
            sed -i 's/copyright-year: .*/copyright-year: "2025-${{ steps.year.outputs.YEAR }}"/g' .licenserc.yaml
            echo "📅⬆️ Updated year to 2025-${{ steps.year.outputs.YEAR }}"
          else
            echo "📅✅ Keeping year as 2025"
          fi
      
      - name: 📄🩹 Fix License Headers
        id: fix-license
        uses: apache/skywalking-eyes/header@5c5b974209f0de5d905f37deb69369068ebfc15c # v0.7.0
        with:
          mode: fix
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🧐 Apply Lint Fixes
        run: golangci-lint run --fix ./...
        continue-on-error: true
      
      - name: 💾 Commit All Fixes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git diff --quiet || {
            git add .
            git commit -m "chore: apply code maintenance (formatting, linting, license headers)"
            git push origin ${{ steps.get-branch.outputs.BRANCH_NAME }}
          }
          
      # Re-checkout if any changes were pushed
      - name: 🔄 Re-checkout after fixes if needed
        run: |
          if git diff --quiet origin/${{ steps.get-branch.outputs.BRANCH_NAME }} HEAD; then
            echo "No changes were committed, skipping re-checkout"
          else
            echo "Changes were committed, re-checking out latest code"
            git fetch
            git checkout origin/${{ steps.get-branch.outputs.BRANCH_NAME }}
          fi
      
      # VALIDATION PHASE
      - name: 🧐 Verify Linting
        run: golangci-lint run ./...
      
      - name: 📄✅ Verify License Headers
        uses: apache/skywalking-eyes/header@5c5b974209f0de5d905f37deb69369068ebfc15c # v0.7.0
        with:
          mode: check
          config: .licenserc.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 💨 Run Local Smoke Tests (Tier 1)
        id: go-smoke-tests
        run: |
          go test -v -race -tags=smoke -coverprofile=coverage-smoke.out ./...

      - name: 🧪 Run Unit Tests (Tier 2)
        if: success()
        id: go-unit-tests
        run: |
          go test -v -race -tags=unit -coverprofile=coverage-unit.out ./...

      - name: 📄 Print Coverage Report
        if: always()
        run: |
          echo "--- Test Coverage ---"
          if [ -f coverage-smoke.out ]; then
            cat coverage-smoke.out
          else
            echo "Coverage file (coverage-smoke.out) not found."
          fi
          if [ -f coverage-unit.out ]; then
            echo "--- Unit Test Coverage ---"
            cat coverage-unit.out
          fi
          echo "---------------------"
      
      - name: 🛡️🔍 Run Vulnerability Check
        run: |
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "Running vulnerability check..."
          govulncheck ./...

  # -------------------------------------------------------
  # E2E GATEKEEPER (PR-target; API-only; uses repo secrets)
  # -------------------------------------------------------
  e2e_gatekeeper:
    name: E2E Test Gatekeeper
    # This job only runs for pull_request_target (safe context with secrets).
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    
    steps:
      # ⚠️ No checkout here. PR code must not be executed in PR-target.

      - name: Create/Update E2E Check Run
        id: create_check
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const checkName = 'E2E Tests (GCP)';
            const sha = context.payload.pull_request.head.sha;
            const { data: checkRun } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: sha,
              status: 'queued',
              output: { title: checkName, summary: 'E2E tests are queued...' }
            });
            core.setOutput('check_run_id', checkRun.id);

      - name: Determine E2E Trigger Type
        id: trigger_type
        run: |
          if [[ "${{ github.actor }}" == "renovate[bot]" ]]; then
            echo "should_auto_trigger=true" >> $GITHUB_OUTPUT
            echo "📦 Renovate PR detected - will auto-trigger E2E tests (after validation passes)"
          else
            echo "should_auto_trigger=false" >> $GITHUB_OUTPUT
            echo "👤 Human PR detected - E2E tests require manual trigger"
          fi

      - name: Update Check for Manual Trigger Required
        if: steps.trigger_type.outputs.should_auto_trigger == 'false'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create_check.outputs.check_run_id }},
              status: 'completed',
              conclusion: 'action_required',
              completed_at: new Date().toISOString(),
              output: {
                title: 'E2E Tests (GCP) - Manual Trigger Required',
                summary: `⚠️ E2E tests require manual trigger by a maintainer after code review.

                A repository maintainer can trigger E2E tests by:
                1. Going to Actions → "Manual E2E Test Trigger" workflow
                2. Click "Run workflow" and enter PR number: ${{ github.event.pull_request.number }}

                This check must pass before the PR can be merged.`
              }
            });

      - name: Wait for Validation to Succeed
        if: steps.trigger_type.outputs.should_auto_trigger == 'true'
        id: wait_validation
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.payload.pull_request.head.sha;
            const targetCheckName = 'Fix and Validate Code';
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));
            let ok = false;

            for (let i = 0; i < 80; i++) { // ~20 min @ 15s
              const { data } = await github.rest.checks.listForRef({ owner, repo, ref, filter: 'latest' });
              const cr = data.check_runs.find(r => r.name === targetCheckName);
              if (!cr || cr.status === 'queued' || cr.status === 'in_progress') {
                await sleep(15000);
                continue;
              }
              if (cr.status === 'completed' && cr.conclusion === 'success') { ok = true; break; }
              core.setFailed(`Validation job conclusion: ${cr?.conclusion || 'unknown'}`);
              return;
            }
            if (!ok) core.setFailed('Validation job did not complete in time');
            core.setOutput('ok', ok ? 'true' : 'false');

      - name: Detect secret availability
        if: |
          steps.trigger_type.outputs.should_auto_trigger == 'true' &&
          steps.wait_validation.outputs.ok == 'true'
        id: have_secrets
        run: |
          if [ -n "${{ secrets.APP_ID_DISPATCH }}" ] && [ -n "${{ secrets.PRIVATE_KEY_DISPATCH }}" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate App Token for E2E Dispatch
        if: |
          steps.trigger_type.outputs.should_auto_trigger == 'true' &&
          steps.wait_validation.outputs.ok == 'true' &&
          steps.have_secrets.outputs.ok == 'true'
        id: app_token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        with:
          app-id: ${{ secrets.APP_ID_DISPATCH }}
          private-key: ${{ secrets.PRIVATE_KEY_DISPATCH }}
          owner: pjscruggs
          repositories: slogcp-test

      - name: Dispatch E2E Tests
        if: steps.app_token.outputs.token != ''
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3
        with:
          token: ${{ steps.app_token.outputs.token }}
          repository: pjscruggs/slogcp-test
          event-type: e2e-test
          client-payload: |
            {
              "lib_repo_full_name": "${{ github.repository }}",
              "pr_sha": "${{ github.event.pull_request.head.sha }}",
              "pr_number": "${{ github.event.pull_request.number }}",
              "lib_run_id": "${{ github.run_id }}",
              "check_run_id": "${{ steps.create_check.outputs.check_run_id }}"
            }

      - name: "Update check: maintainer trigger required (fallback)"
        if: |
          steps.trigger_type.outputs.should_auto_trigger == 'true' &&
          (steps.wait_validation.outputs.ok != 'true' ||
           steps.have_secrets.outputs.ok != 'true' ||
           steps.app_token.outputs.token == '')
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create_check.outputs.check_run_id }},
              status: 'completed',
              conclusion: 'action_required',
              completed_at: new Date().toISOString(),
              output: {
                title: 'E2E Tests (GCP) - Manual Trigger Required',
                summary: `Secrets not available or validation not successful. A maintainer can run the "Manual E2E Test Trigger" workflow with PR #${{ github.event.pull_request.number }}.`
              }
            });
